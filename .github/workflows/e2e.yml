name: üß™ E2E Tests

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'charts/README.md'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'charts/README.md'
      - 'SECURITY.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'

# Cancel previous E2E runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code-changed: ${{ steps.changes.outputs.code-changed }}
      e2e-needed: ${{ steps.decision.outputs.e2e-needed }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check for code changes
      id: changes
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # For push events, always run E2E
          echo "code-changed=true" >> $GITHUB_OUTPUT
        else
          # For PRs, check if code actually changed
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          if echo "$CHANGED_FILES" | grep -E "\.(go|yaml|yml)$|Makefile|Dockerfile" > /dev/null; then
            echo "code-changed=true" >> $GITHUB_OUTPUT
          else
            echo "code-changed=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Decide if E2E tests are needed
      id: decision
      run: |
        if [[ "${{ steps.changes.outputs.code-changed }}" == "true" ]]; then
          echo "e2e-needed=true" >> $GITHUB_OUTPUT
          echo "üß™ E2E tests will run - code changes detected"
        else
          echo "e2e-needed=false" >> $GITHUB_OUTPUT
          echo "‚è≠Ô∏è Skipping E2E tests - only documentation changes"
        fi

  e2e-functionality:
    name: E2E Functionality Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.e2e-needed == 'true'
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Create Kind cluster
      run: |
        kind create cluster --name parallax-e2e --wait 60s
        kubectl cluster-info --context kind-parallax-e2e

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and load operator image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        load: true
        tags: parallax:e2e-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=e2e-test
          COMMIT=${{ github.sha }}
          DATE=${{ github.event.head_commit.timestamp }}

    - name: Load image into Kind cluster
      run: |
        kind load docker-image parallax:e2e-test --name parallax-e2e

    - name: Deploy operator
      run: |
        make install
        make deploy IMG=parallax:e2e-test
        
        # Wait for operator to be ready
        kubectl wait --for=condition=Available deployment/parallax-controller-manager \
          -n parallax-system --timeout=300s

    - name: Run Parallax functionality tests
      run: |
        # Test ListSource functionality
        echo "üß™ Testing ListSource functionality..."
        
        # Create a test namespace
        kubectl create namespace parallax-test
        
        # Test 1: Static ListSource
        kubectl apply -f - <<EOF
        apiVersion: batchops.io/v1alpha1
        kind: ListSource
        metadata:
          name: test-fruits
          namespace: parallax-test
        spec:
          type: static
          staticList:
            - apple
            - banana
            - orange
          intervalSeconds: 60
        EOF
        
        # Wait for ListSource to be processed
        echo "Waiting for ListSource to be processed..."
        sleep 10
        
        # Verify ConfigMap was created
        if kubectl get configmap test-fruits -n parallax-test >/dev/null 2>&1; then
          echo "‚úÖ ListSource ConfigMap created successfully"
          kubectl get configmap test-fruits -n parallax-test -o yaml
        else
          echo "‚ùå ListSource ConfigMap not created"
          exit 1
        fi
        
        # Test 2: ListJob with static list
        echo "üß™ Testing ListJob functionality..."
        kubectl apply -f - <<EOF
        apiVersion: batchops.io/v1alpha1
        kind: ListJob
        metadata:
          name: test-processor
          namespace: parallax-test
        spec:
          staticList:
            - item1
            - item2
            - item3
          parallelism: 2
          template:
            image: busybox:latest
            command: ["/bin/sh", "-c", "echo Processing: \$ITEM && sleep 2"]
            envName: ITEM
            resources:
              requests:
                cpu: "50m"
                memory: "32Mi"
        EOF
        
        # Wait for Job to be created
        echo "Waiting for Job to be created..."
        sleep 15
        
        # Verify Job was created
        if kubectl get job -l listjob=test-processor -n parallax-test >/dev/null 2>&1; then
          echo "‚úÖ ListJob created Kubernetes Job successfully"
          kubectl get job -l listjob=test-processor -n parallax-test -o yaml
        else
          echo "‚ùå ListJob did not create Kubernetes Job"
          kubectl get events -n parallax-test
          exit 1
        fi
        
        # Test 3: ListCronJob
        echo "üß™ Testing ListCronJob functionality..."
        kubectl apply -f - <<EOF
        apiVersion: batchops.io/v1alpha1
        kind: ListCronJob
        metadata:
          name: test-scheduled
          namespace: parallax-test
        spec:
          schedule: "0 */1 * * *"  # Every hour
          staticList:
            - scheduled-item1
            - scheduled-item2
          parallelism: 1
          template:
            image: busybox:latest
            command: ["/bin/sh", "-c", "echo Scheduled: \$ITEM"]
            envName: ITEM
            resources:
              requests:
                cpu: "50m"
                memory: "32Mi"
        EOF
        
        # Wait for CronJob to be created
        echo "Waiting for CronJob to be created..."
        sleep 10
        
        # Verify CronJob was created
        if kubectl get cronjob -l listcronjob=test-scheduled -n parallax-test >/dev/null 2>&1; then
          echo "‚úÖ ListCronJob created Kubernetes CronJob successfully"
          kubectl get cronjob -l listcronjob=test-scheduled -n parallax-test -o yaml
        else
          echo "‚ùå ListCronJob did not create Kubernetes CronJob"
          kubectl get events -n parallax-test
          exit 1
        fi

    - name: Collect debug information on failure
      if: failure()
      run: |
        echo "üîç Collecting debug information..."
        
        echo "=== Operator Logs ==="
        kubectl logs -l control-plane=controller-manager -n parallax-system --tail=100
        
        echo "=== Events ==="
        kubectl get events -n parallax-test --sort-by='.lastTimestamp'
        
        echo "=== Resources ==="
        kubectl get all -n parallax-test
        kubectl get listsources,listjobs,listcronjobs -n parallax-test -o yaml

    - name: Cleanup
      if: always()
      run: |
        kubectl delete namespace parallax-test --ignore-not-found=true
        kind delete cluster --name parallax-e2e

  e2e-upgrade:
    name: E2E Upgrade Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.e2e-needed == 'true' && github.event_name == 'push'
    timeout-minutes: 20
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Helm chart upgrade
      run: |
        kind create cluster --name parallax-upgrade --wait 60s
        
        # Install previous version (if exists)
        helm repo add parallax https://github.com/matanryngler/parallax/releases/latest/download/ || true
        
        # Build current version with caching
        docker buildx build \
          --platform linux/amd64 \
          --load \
          --tag parallax:upgrade-test \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --build-arg VERSION=upgrade-test \
          --build-arg COMMIT=${{ github.sha }} \
          --build-arg DATE=${{ github.event.head_commit.timestamp }} \
          .
        
        kind load docker-image parallax:upgrade-test --name parallax-upgrade
        
        # Test helm install
        helm install parallax ./charts/parallax --set image.tag=upgrade-test --wait
        
        echo "‚úÖ Helm chart installation successful"
        
        # Cleanup
        kind delete cluster --name parallax-upgrade

  summary:
    name: E2E Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, e2e-functionality, e2e-upgrade]
    if: always()
    steps:
    - name: Report results
      run: |
        if [[ "${{ needs.detect-changes.outputs.e2e-needed }}" == "false" ]]; then
          echo "‚è≠Ô∏è E2E tests skipped - only documentation changes detected"
        elif [[ "${{ needs.e2e-functionality.result }}" == "success" ]]; then
          echo "‚úÖ E2E functionality tests passed"
        else
          echo "‚ùå E2E functionality tests failed"
          exit 1
        fi